/*
Iyemenvile Joel Itipo
*/

.global main
.func main

main: 
	/*First Input*/ 	
	BL _scanf
	MOV R1,R0 
	MOV R8,R1 /* back up R1*/
	MOV R6,R1
	
	/* Sencond Input*/
	BL _scanf
	MOV R2,R0 
	MOV R0,#0	
	MOV R9,R2 
	MOV R10,R2/*backup R2*/ 

	BL _count_Partitions

	/* Printing */ 
	MOV R1,R4 
	MOV R2,R6 /* this send the value n into R2 to be print out*/
	MOV R3,R10 /* send the value R2 into R3 for printing*/
	BL _printf

	
	@BL _exit
	MOV R4,#0
	B main

_printf: 
	PUSH {LR}
	LDR R0,=printf_str
	BL printf
	POP {PC}

_count_Partitions: 
	PUSH {LR}
	MOV R1,R8
	@MOV R2,R10

	/* this return R0=1 n==0 R1=0 */ 
	CMP R1,#0 @ compare input argument to 0
	MOVEQ R0,#1
	ADDEQ R4,R0
	POPEQ {PC}

	/* this return R0=0 when n<0 R1<0 */
	MOVLT R0,#0
	ADDLT R4,R0
	POPLT {PC}

	/* this return 0 when m=0*/
	CMP R2,#0
	MOVEQ R0,#1
	ADDEQ R4,R0
	POPEQ {PC}

	/*Else*/
	SUB R2,R2,#1
	BL _count_Partitions
	MOV R10,R9
	/* n-m I used the back up of R1*/
	SUB R8,R2	
	BL _count_Partitions
	
	POP {PC}
	
_scanf: 
	PUSH {LR}
	SUB SP,SP, #4
	LDR R0,=format_str
	MOV R1,SP
	BL scanf
	LDR R0,[SP]
	ADD SP,SP,#4
	POP {PC}


.data
format_str:	.asciz	"%d"
printf_str:	.asciz	"There are %d partitions of %d using integers up to %d\n"



